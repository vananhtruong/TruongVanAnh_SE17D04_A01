@page
@model TVANewManagementSystemRazorPage.Pages.Admin.ReportModel
@{
    ViewData["Title"] = "Reports";
    Layout = "~/Pages/Shared/_LayoutAdmin.cshtml"; // Match MVC layout
}

<div class="container mt-5">
    <h1 class="mb-4">Báo cáo bài viết</h1>

    <!-- Form nhập ngày -->
    <form method="post" class="mb-4">
        <div class="row align-items-end">
            <div class="col-md-3">
                <label class="form-label">Từ ngày:</label>
                <input type="date" name="startDate" class="form-control" required value="@(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("yyyy-MM-dd") : "")" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Đến ngày:</label>
                <input type="date" name="endDate" class="form-control" required value="@(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "")" />
            </div>
            <div class="col-md-2">
                <button type="submit" class="btn btn-primary w-100">Tạo báo cáo</button>
            </div>
        </div>
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger mt-3">@TempData["Error"]</div>
        }
    </form>

    <!-- Thống kê theo category -->
    @if (Model.NewsArticles != null && Model.NewsArticles.Any())
    {
        var groupedByCategory = Model.NewsArticles.GroupBy(n => n.Category?.CategoryName ?? "Không có danh mục");
        var totalArticles = Model.NewsArticles.Count();
        var startDate = Model.NewsArticles.Min(n => n.CreatedDate)?.ToString("dd/MM/yyyy");
        var endDate = Model.NewsArticles.Max(n => n.CreatedDate)?.ToString("dd/MM/yyyy");

        <div class="card mb-4">
            <div class="card-header bg-dark text-white">
                <h4 class="mb-0">Thống kê từ @startDate đến @endDate</h4>
            </div>
            <div class="card-body">
                <ul class="list-group list-group-flush">
                    @foreach (var group in groupedByCategory)
                    {
                        <li class="list-group-item">@group.Key: @group.Count() bài báo</li>
                    }
                    <li class="list-group-item fw-bold">Tổng cộng: @totalArticles bài báo</li>
                </ul>
            </div>
        </div>

        <!-- Bảng chi tiết -->
        <h2 class="mb-3">Danh sách bài viết</h2>
        <div class="table-responsive">
            <table id="reportTable" class="table table-bordered table-striped table-hover text-center">
                <thead class="table-dark">
                    <tr>
                        <th>Tiêu đề</th>
                        <th>Danh mục</th>
                        <th>Tác giả</th>
                        <th>Ngày tạo</th>
                        <th>Ngày sửa</th>
                        <th>Trạng thái</th>
                    </tr>
                </thead>
                <tbody id="reportTableBody">
                    @foreach (var article in Model.NewsArticles)
                    {
                        <tr>
                            <td class="text-start">@article.NewsTitle</td>
                            <td>@(article.Category?.CategoryName ?? "N/A")</td>
                            <td>@(article.CreatedBy?.AccountName ?? "N/A")</td>
                            <td>@(article.CreatedDate.HasValue ? article.CreatedDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                            <td>@(article.ModifiedDate.HasValue ? article.ModifiedDate.Value.ToString("yyyy-MM-dd") : "N/A")</td>
                            <td>
                                <span class="badge @(article.NewsStatus.HasValue && article.NewsStatus.Value ? "bg-success" : "bg-danger")">
                                    @(article.NewsStatus.HasValue ? (article.NewsStatus.Value ? "Active" : "Inactive") : "N/A")
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination Controls -->
        <nav aria-label="Report Table Pagination" class="mt-4">
            <ul id="pagination" class="pagination justify-content-center"></ul>
        </nav>
    }
    else if (Model.NewsArticles != null)
    {
        <div class="alert alert-warning" role="alert">
            Không tìm thấy bài viết nào trong khoảng thời gian đã chọn.
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const table = document.getElementById("reportTable");
            const tbody = document.getElementById("reportTableBody");
            const rows = Array.from(tbody.getElementsByTagName("tr"));
            const rowsPerPage = 15; // Số dòng mỗi trang
            const totalRows = rows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage);
            let currentPage = 1;

            function displayRows(page) {
                const start = (page - 1) * rowsPerPage;
                const end = start + rowsPerPage;

                rows.forEach((row, index) => {
                    row.style.display = (index >= start && index < end) ? "" : "none";
                });
            }

            function setupPagination() {
                const pagination = document.getElementById("pagination");
                pagination.innerHTML = "";

                // Previous Button
                const prevLi = document.createElement("li");
                prevLi.className = "page-item" + (currentPage === 1 ? " disabled" : "");
                const prevLink = document.createElement("a");
                prevLink.className = "page-link";
                prevLink.href = "#";
                prevLink.textContent = "Previous";
                prevLink.addEventListener("click", (e) => {
                    e.preventDefault();
                    if (currentPage > 1) {
                        currentPage--;
                        displayRows(currentPage);
                        setupPagination();
                    }
                });
                prevLi.appendChild(prevLink);
                pagination.appendChild(prevLi);

                // Page Numbers
                for (let i = 1; i <= totalPages; i++) {
                    const li = document.createElement("li");
                    li.className = "page-item" + (i === currentPage ? " active" : "");
                    const link = document.createElement("a");
                    link.className = "page-link";
                    link.href = "#";
                    link.textContent = i;
                    link.addEventListener("click", (e) => {
                        e.preventDefault();
                        currentPage = i;
                        displayRows(currentPage);
                        setupPagination();
                    });
                    li.appendChild(link);
                    pagination.appendChild(li);
                }

                // Next Button
                const nextLi = document.createElement("li");
                nextLi.className = "page-item" + (currentPage === totalPages ? " disabled" : "");
                const nextLink = document.createElement("a");
                nextLink.className = "page-link";
                nextLink.href = "#";
                nextLink.textContent = "Next";
                nextLink.addEventListener("click", (e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) {
                        currentPage++;
                        displayRows(currentPage);
                        setupPagination();
                    }
                });
                nextLi.appendChild(nextLink);
                pagination.appendChild(nextLi);
            }

            if (totalRows > 0) {
                displayRows(currentPage);
                setupPagination();
            }
        });
    </script>
}